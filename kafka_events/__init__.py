"""ACA-Py Event to Kafka Bridge."""

import logging
import re

from aries_cloudagent.config.injection_context import InjectionContext
from aries_cloudagent.core.event_bus import Event, EventBus
from aries_cloudagent.core.profile import Profile

from .aio_producer import AIOProducer
from .aio_consumer import AIOConsumer
ALL_EVENTS = re.compile(r".*")
LOGGER = logging.getLogger(__name__)


async def setup(context: InjectionContext):
    """Setup the plugin."""
    bus = context.inject(EventBus)
    producer = AIOProducer() 
    context.injector.bind_instance(AIOProducer, producer)
    consumer = AIOConsumer(context)
    context.injector.bind_instance(AIOConsumer, consumer)
    bus.subscribe(ALL_EVENTS, handle_event)

async def teardown(context: InjectionContext):
    producer = context.inject(AIOProducer)
    producer.close()
    consumer = context.inject(AIOConsumer)
    consumer.close()


async def handle_event(profile: Profile, event: Event):
    """
    Handle events, passing them off to Kafka.

    Events originating from ACA-Py will be namespaced with `acapy`; for example:

        acapy::record::present_proof::presentation_received

    There are two primary namespaces of ACA-Py events.
    - `record` corresponding to events generated by updates to records. These
      follow the pattern:

        acapy::record::{RECORD_TOPIC}

      This pattern corresponds to records that do not hold a state.
      For stateful records, the following pattern is used:

        acapy::record::{RECORD_TOPIC}::{STATE}

      A majority of records are stateful.
    - `webhook` corresponding to events originally sent only by webhooks or
      that should be sent via webhook. These are emitted by code that has not
      yet been updated to use the event bus. These events should be relatively
      infrequent.
    """
    LOGGER.info("Handling event: %s", event)
    producer = profile.context.inject(AIOProducer)
    await producer.produce(event.topic, event.payload)
    
