"""ACA-Py Event to Kafka Bridge."""

import json
import logging
import re

from aiokafka import AIOKafkaProducer
from aries_cloudagent.config.injection_context import InjectionContext
from aries_cloudagent.core.event_bus import Event, EventBus
from aries_cloudagent.core.profile import Profile

# from .aio_consumer import AIOConsumer
EVENT_PATTERN_WEBHOOK = re.compile("^acapy::webhook::(.*)$")
EVENT_PATTERN_RECORD = re.compile("^acapy::record::([^:]*)(?:::.*)?$")
OUTBOUND_PATTERN = re.compile("acapy::outbound::message$")  # For Event Bus
INBOUND_PATTERN = re.compile("acapy-inbound-.*")  # For Kafka Consumer
BASIC_MESSAGE_PATTERN = re.compile("acapy::basicmessage::.*")
LOGGER = logging.getLogger(__name__)
TOPICS = []
DEFAULT_CONFIG = {"bootstrap_servers": "kafka"}
"""

 - TOPICS
  - outbound
  - webhooks

webhook, no kid
outbound, keys
transport,
"""


async def setup(context: InjectionContext):
    """Setup the plugin."""

    try:
        producer_conf = context.settings["plugin_config"]["kafka_queue"][
            "producer-config"
        ]
    except KeyError:
        producer_conf = DEFAULT_CONFIG
    context.injector.bind_instance(
        AIOKafkaProducer, AIOKafkaProducer(**producer_conf)
    )  # Add the Kafka producer in the context
    # Handle event for Kafka
    bus = context.inject(EventBus)
    bus.subscribe(EVENT_PATTERN_WEBHOOK, handle_event)
    bus.subscribe(BASIC_MESSAGE_PATTERN, handle_event)
    bus.subscribe(OUTBOUND_PATTERN, handle_event)
    bus.subscribe(EVENT_PATTERN_RECORD, handle_event)


async def handle_event(profile: Profile, event: Event):
    """
    Handle events, passing them off to Kafka.

    Events originating from ACA-Py will be namespaced with `acapy`; for example:

        acapy::record::present_proof::presentation_received

    There are two primary namespaces of ACA-Py events.
    - `record` corresponding to events generated by updates to records. These
      follow the pattern:

        acapy::record::{RECORD_TOPIC}

      This pattern corresponds to records that do not hold a state.
      For stateful records, the following pattern is used:

        acapy::record::{RECORD_TOPIC}::{STATE}

      A majority of records are stateful.
    - `webhook` corresponding to events originally sent only by webhooks or
      that should be sent via webhook. These are emitted by code that has not
      yet been updated to use the event bus. These events should be relatively
      infrequent.
    """
    producer = profile.inject(AIOKafkaProducer)
    await producer.start()
    LOGGER.info("Handling Kafka producer event: %s", event)
    topic = event.topic.replace("::", "-")
    """
    if subwallet is present in profile, for example webhook,
    extract and put into the payload for futher processing
    """
    try:
        LOGGER.info(f"Sending message {event.payload} with Kafka topic {topic}")
        await producer.send_and_wait(
            topic, str.encode(json.dumps(event.payload))
        )  # Produce message
    except Exception as exc:
        LOGGER.error(f"Kafka producer failed sending a message due to: {exc}")
