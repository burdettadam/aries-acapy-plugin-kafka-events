"""ACA-Py Event to Kafka Bridge."""

import json
import logging
import re
from typing import Any, Mapping

from aiokafka import AIOKafkaProducer
from aries_cloudagent.config.injection_context import InjectionContext
from aries_cloudagent.config.settings import Settings
from aries_cloudagent.core.event_bus import Event, EventBus
from aries_cloudagent.core.profile import Profile

EVENT_PATTERN_WEBHOOK = re.compile("^acapy::webhook::(.*)$")
EVENT_PATTERN_RECORD = re.compile("^acapy::record::([^:]*)(?:::.*)?$")
BASIC_MESSAGE_PATTERN = re.compile("acapy::basicmessage::.*")
DEFAULT_CONFIG = {"bootstrap_servers": "kafka"}

LOGGER = logging.getLogger(__name__)


def get_config(settings: Settings) -> Mapping[str, Any]:
    """Retrieve producer configuration from settings."""
    try:
        producer_conf = (
            settings["plugin_config"]["kafka_queue"]["producer-config"]
            or DEFAULT_CONFIG
        )
    except KeyError:
        producer_conf = DEFAULT_CONFIG

    return producer_conf


async def setup(context: InjectionContext):
    """Setup the plugin."""
    producer = AIOKafkaProducer(**get_config(context.settings))
    await producer.start()

    # Add the Kafka producer in the context
    context.injector.bind_instance(AIOKafkaProducer, producer)

    # Handle event for Kafka
    bus = context.inject(EventBus)
    if not bus:
        raise ValueError("EventBus missing in context")

    bus.subscribe(EVENT_PATTERN_WEBHOOK, handle_event)
    bus.subscribe(BASIC_MESSAGE_PATTERN, handle_event)
    bus.subscribe(EVENT_PATTERN_RECORD, handle_event)


async def handle_event(profile: Profile, event: Event):
    """
    Handle events, passing them off to Kafka.

    Events originating from ACA-Py will be namespaced with `acapy`; for example:

        acapy::record::present_proof::presentation_received

    There are two primary namespaces of ACA-Py events.
    - `record` corresponding to events generated by updates to records. These
      follow the pattern:

        acapy::record::{RECORD_TOPIC}

      This pattern corresponds to records that do not hold a state.
      For stateful records, the following pattern is used:

        acapy::record::{RECORD_TOPIC}::{STATE}

      A majority of records are stateful.
    - `webhook` corresponding to events originally sent only by webhooks or
      that should be sent via webhook. These are emitted by code that has not
      yet been updated to use the event bus. These events should be relatively
      infrequent.
    """

    producer = profile.inject(AIOKafkaProducer)
    if not producer:
        raise ValueError("AIOKafkaProducer missing in context")

    LOGGER.info("Handling Kafka producer event: %s", event)
    topic = event.topic.replace("::", "-")
    event.payload["wallet_id"] = profile.settings.get("wallet.id")
    try:
        LOGGER.info(f"Sending message {event.payload} with Kafka topic {topic}")
        # Produce message
        await producer.send_and_wait(topic, str.encode(json.dumps(event.payload)))
    except Exception:
        LOGGER.exception("Kafka producer failed to send message")
