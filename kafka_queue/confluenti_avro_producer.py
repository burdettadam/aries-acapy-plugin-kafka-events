"""ACA-Py Event to Kafka Bridge."""

import logging
import re

from aries_cloudagent.config.injection_context import InjectionContext
from aries_cloudagent.core.event_bus import Event, EventBus
from aries_cloudagent.core.in_memory import InMemoryProfile
from aries_cloudagent.core.profile import Profile
from aries_cloudagent.transport.outbound.status import OutboundSendStatus

from confluent_kafka import avro
import json
import uuid

from confluent_kafka.avro import AvroProducer
# from .aio_consumer import AIOConsumer

OUTBOUND_PATTERN = "acapy::outbound::message$"  # For Event Bus
INBOUND_PATTERN = "acapy-inbound-.*"  # For Kafka Consumer
BASIC_MESSAGE_PATTERN = "acapy::basicmessage::.*"
LOGGER = logging.getLogger(__name__)
TOPICS = []
BASIC_MESSAGE_SCHEMA = {
    "namespace": "io.acapy.basicmessage",
    "type": "acapy::basicmessage",
    "name": "basicMessage",
    "fields": [
        {
        "name": "connection_id",
        "type": "string"
        },
            {
      "name": "message_id",
      "type": "string"
    },
        {
      "name": "content",
      "type": "string"
    },
            {
      "name": "state",
      "type": "string" # todo: update to message state
    },
            {
      "name": "sent_time",
      "type": "string" # todo: update to time stamp
    },
    ]
}
key_schema = avro.loads("""{"type": "string"}""")
value_schema = avro.loads(BASIC_MESSAGE_SCHEMA)

async def setup(context: InjectionContext):
    """Setup the plugin."""
    # Handle event for Kafka
    bus = context.inject(EventBus)
    #bus.subscribe(re.compile(OUTBOUND_PATTERN), handle_event)
    bus.subscribe(re.compile(BASIC_MESSAGE_PATTERN), handle_event)

async def handle_event(profile: Profile, event: Event):
    """
    Handle events, passing them off to Kafka.

    Events originating from ACA-Py will be namespaced with `acapy`; for example:

        acapy::record::present_proof::presentation_received

    There are two primary namespaces of ACA-Py events.
    - `record` corresponding to events generated by updates to records. These
      follow the pattern:

        acapy::record::{RECORD_TOPIC}

      This pattern corresponds to records that do not hold a state.
      For stateful records, the following pattern is used:

        acapy::record::{RECORD_TOPIC}::{STATE}

      A majority of records are stateful.
    - `webhook` corresponding to events originally sent only by webhooks or
      that should be sent via webhook. These are emitted by code that has not
      yet been updated to use the event bus. These events should be relatively
      infrequent.
    """
    producer_config = {
        "bootstrap.servers": "kafka",
        # "schema.registry.url": 
    }
    topic = event.topic.replace("::", "-")
    try:
        # Produce message
        LOGGER.info(f"Sending message {event.payload} with Kafka topic {topic}")
        producer = AvroProducer(producer_config, default_key_schema=key_schema, default_value_schema=value_schema)
        try:
            producer.produce(topic=topic, key=str(uuid.uuid4()), value=event.payload)
        except Exception as e:
            LOGGER.error(f"Exception while producing event value - {event.payload} to topic - {topic}: {e}")
        else:
            LOGGER.debug(f"Successfully producing record value - {event.payload} to topic - {topic}")

        # producer.flush() # used to make this method synchronous, blocking until all topics sent
    except Exception as exc:
        LOGGER.error(f"Kafka producer failed sending a message due {exc}")